------- FILE rickyTest.s LEVEL 1 PASS 2
      1  1122 ????						;/*
      2  1122 ????						;    Hi.
      3  1122 ????						;*/
      4  1122 ????
      5  1122 ????						;/*
      6  1122 ????						;    Processor Information
      7  1122 ????						;*/
      8  1122 ????				      processor	6502	; This informs the assembler that we are using a 6502 processor.
      9  1122 ????
     10  1122 ????						;/*
     11  1122 ????						;    Memory Map
     12  1122 ????						;*/
     13  1001					      org	$1001	; mem location of user region
     14  1001		       0b 10		      dc.w	stubend
     15  1003		       01 00		      dc.w	1	; arbitrary line number for BASIC syntax
     16  1005		       9e 34 33 35*	      dc.b	$9e, "4353", 0	; allocate bytes. 4353 = 1101
     17  100b
     18  100b				   stubend
     19  100b		       00 00		      dc.w	0	; insert null byte
     20  100d
     21  100d							;/*
     22  100d							;    Global Definitions
     23  100d							;*/
     24  100d		       ff d2	   CHROUT     =	$FFD2	; kernal character output routine
     25  100d		       e5 5f	   CLS	      =	$E55f	; kernal clear screen routine
     26  100d		       94 00	   COLMEM     =	$9400	; Color memory location
     27  100d		       1e 00	   SCRMEM     =	$1E00	; Screen memory location
     28  100d							;SCREEN_COLOR = $
     29  100d							;BORDER_COLOR = $
     30  100d							;CHARACTER_COLOR = $
     31  100d							;AUX_COLOR = $
     32  100d		       00 00 00    pad	      .byte.b	$00, $00, $00	; Padding so that next byte is on 8 byte boundary
     33  1010		       18 24 42 7e*customA    .byte.b	$18, $24, $42, $7E, $42, $42, $42, $00	; custom character A (has a mix of screen color, border color, character color, and aux color. honestly, this is the example A from the bible hehe)
     34  1018
     35  1018							;/*
     36  1018							;    Main Program
     37  1018							;*/
     38  1101					      org	$1101	; mem location of code region
     39  1101				   start
     40  1101		       20 5f e5 	      jsr	CLS	; clear screen
     41  1104		       4c 08 11 	      jmp	prepareColor
     42  1107		       60		      rts		; return to caller
     43  1108
     44  1108				   prepareColor
     45  1108							; in this routine, we will set the screen color, border color, character color, and aux color
     46  1108							; once we have set the colors, we will store them in the appropriate memory locations
     47  1108							; after that we will call another method to print characters to the screen (which will all require new bit patterns due to the new colors)
     48  1108		       a9 00		      lda	#$00	; set screen color to black
     49  110a		       8d 0f 90 	      sta	$900f	; store screen color in memory
     50  110d		       a9 01		      lda	#$01	; set border color to white
     51  110f		       8d 0e 90 	      sta	$900e	; store border color in memory
     52  1112
     53  1112							;/*
     54  1112							; * Sets the contents of the border and background color register
     55  1112							; * Input: border and background color bits in a
     56  1112							;*/
     57  1112				   printCharacters
     58  1112							; custom character A
     59  1112		       a9 fc		      lda	#$fc
     60  1114		       8d 05 90 	      sta	$9005	; load custom character set
     61  1117		       20 5f e5 	      jsr	$e55f	; clear screen
     62  111a		       a9 42		      lda	#$42	; set a to first character in new character set
     63  111c		       20 d2 ff 	      jsr	CHROUT
     64  111f		       4c 12 11 	      jmp	printCharacters
     65  1122
     66  1122							;/*
     67  1122							;    Note Section
     68  1122							;    -> Apparently the formula to find the current location of color memory is:
     69  1122							;	  C = 37888 + 4 * (PEAK (36866) AND 128) [This formula is obviously in BASIC]
     70  1122							;	  So, the formula in 6502 ASM is:
     71  1122							;	  C = $9400 + 4 * ($9000 AND $80) [Obviously, this isn't right, just noting it down in a basic sense]
     72  1122							;*/
