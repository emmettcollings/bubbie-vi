------- FILE rickyTest.s LEVEL 1 PASS 2
      1  1122 ????						;/*
      2  1122 ????						;    Hi.
      3  1122 ????						;*/
      4  1122 ????
      5  1122 ????						;/*
      6  1122 ????						;    Processor Information
      7  1122 ????						;*/
      8  1122 ????				      processor	6502	; This informs the assembler that we are using a 6502 processor.
      9  1122 ????
     10  1122 ????						;/*
     11  1122 ????						;    Memory Map
     12  1122 ????						;*/
     13  1001					      org	$1001	; mem location of user region
     14  1001		       0b 10		      dc.w	stubend
     15  1003		       01 00		      dc.w	1	; arbitrary line number for BASIC syntax
     16  1005		       9e 34 33 35*	      dc.b	$9e, "4353", 0	; allocate bytes. 4353 = 1101
     17  100b
     18  100b				   stubend
     19  100b		       00 00		      dc.w	0	; insert null byte
     20  100d
     21  100d							;/*
     22  100d							;    Global Definitions
     23  100d							;*/
     24  100d		       ff d2	   CHROUT     =	$FFD2	; kernal character output routine
     25  100d		       e5 5f	   CLS	      =	$E55f	; kernal clear screen routine
     26  100d		       94 00	   COLMEM     =	$9400	; Color memory location
     27  100d		       1e 00	   SCRMEM     =	$1E00	; Screen memory location
     28  100d							;SCREEN_COLOR = $
     29  100d							;BORDER_COLOR = $
     30  100d							;CHARACTER_COLOR = $
     31  100d							;AUX_COLOR = $
     32  100d		       18 24 42 7e*customA    .byte.b	$18, $24, $42, $7E, $42, $42, $42, $00	; custom character A (has a mix of screen color, border color, character color, and aux color. honestly, this is the example A from the bible hehe)
     33  1015
     34  1015							;/*
     35  1015							;    Main Program
     36  1015							;*/
     37  1101					      org	$1101	; mem location of code region
     38  1101				   start
     39  1101		       20 5f e5 	      jsr	CLS	; clear screen
     40  1104		       a9 bc		      lda	#$bc	; funny colors
     41  1106		       4c 0a 11 	      jmp	colorShift
     42  1109		       60		      rts		; return to caller
     43  110a
     44  110a				   prepareColor
     45  110a							; in this routine, we will set the screen color, border color, character color, and aux color
     46  110a							; once we have set the colors, we will store them in the appropriate memory locations
     47  110a							; after that we will call another method to print characters to the screen (which will all require new bit patterns due to the new colors)
     48  110a
     49  110a							;/*
     50  110a							; * Sets the contents of the border and background color register
     51  110a							; * Input: border and background color bits in a
     52  110a							;*/
     53  110a				   colorShift
     54  110a		       8d 0f 90 	      sta	$900f	; location of screen and border color stuff (bits 4-7 are border color, bits 0-2 are background color)
     55  110d		       a9 55		      lda	#$55	; funny colors
     56  110f		       8d 0e 90 	      sta	$900e	; bits 0-3 set volume of all sounds, bits 4-7 set aux color
     57  1112		       a9 fc		      lda	#$fc
     58  1114		       8d 05 90 	      sta	$9005	; load custom character set
     59  1117		       20 5f e5 	      jsr	$e55f	; clear screen
     60  111a		       a9 42		      lda	#$42	; set a to first character in new character set
     61  111c		       20 d2 ff 	      jsr	CHROUT
     62  111f		       4c 0a 11 	      jmp	colorShift
     63  1122
     64  1122							;/*
     65  1122							;    Note Section
     66  1122							;    -> Apparently the formula to find the current location of color memory is:
     67  1122							;	  C = 37888 + 4 * (PEAK (36866) AND 128) [This formula is obviously in BASIC]
     68  1122							;	  So, the formula in 6502 ASM is:
     69  1122							;	  C = $9400 + 4 * ($9000 AND $80) [Obviously, this isn't right, just noting it down in a basic sense]
     70  1122							;*/
