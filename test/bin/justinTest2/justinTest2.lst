------- FILE justinTest2.s LEVEL 1 PASS 2
      1  158a ????						;/*
      2  158a ????						;    Processor Information
      3  158a ????						;*/
      4  158a ????				      processor	6502	; This informs the assembler that we are using a 6502 processor.
      5  158a ????
      6  158a ????						;/*
      7  158a ????						;    Memory Map
      8  158a ????						;*/
      9  1001					      org	$1001	; mem location of user region
     10  1001		       0b 10		      dc.w	stubend
     11  1003		       01 00		      dc.w	1	; arbitrary line number for BASIC syntax
     12  1005		       9e 34 33 35*	      dc.b	$9e, "4353", 0	; allocate bytes. 4353 = 1101
     13  100b
     14  100b							;/*
     15  100b							;    Global Definitions
     16  100b							;*/
     17  100b		       ff d2	   CHROUT     =	$ffd2	; kernal character output routine
     18  100b
     19  100b							;/*
     20  100b							;    Utility Routines
     21  100b							;*/
     22  100b				   stubend
     23  100b		       00 00		      dc.w	0	; insert null byte
     24  100d
     25  100d							;/*
     26  100d							;    Data
     27  100d							;*/
     28  100d		       00 00 00    pad	      .byte.b	$00, $00, $00	; Padding so that next byte is on 8 byte boundary
     29  1010		       00 3c 26 56*chr_1      .byte.b	$00, $3c, $26, $56, $56, $26, $3c, $24	; sus?
     30  1018		       00 00 00 00*chr_1_b    .byte.b	$00, $00, $00, $00, $00, $00, $00, $00	; sus_v2?
     31  1020
     32  1020							;/*
     33  1020							;    Main Routine
     34  1020							;*/
     35  1101					      org	$1101	; mem location of code region
     36  1101				   start
     37  1101		       a9 fc		      lda	#$fc
     38  1103		       8d 05 90 	      sta	$9005	; load custom character set
     39  1106		       20 5f e5 	      jsr	$e55f	; clear screen
     40  1109		       a9 42		      lda	#$42	; set a to first character in new character set
     41  110b		       20 d2 ff 	      jsr	CHROUT
     42  110e		       a9 43		      lda	#$43	; set a to second character in new character set
     43  1110		       20 d2 ff 	      jsr	CHROUT
     44  1113
     45  1113		       a9 01		      lda	#$01
     46  1115		       85 fc		      sta	$fc
     47  1117		       20 61 15 	      jsr	characterFlip
     48  111a
     49  111a				   loop
     50  111a		       a9 4f		      lda	#$4f
     51  111c		       85 fc		      sta	$fc
     52  111e		       20 51 15 	      jsr	timer
     53  1121
     54  1121		       a9 7e		      lda	#$7e
     55  1123		       8d 18 15 	      sta	$1518
     56  1126		       a9 10		      lda	#$10
     57  1128		       8d 19 15 	      sta	$1519
     58  112b		       a9 10		      lda	#$10
     59  112d		       8d 1a 15 	      sta	$151a
     60  1130
     61  1130		       20 01 15 	      jsr	charShift_H
     62  1133		       4c 1a 11 	      jmp	loop
     63  1136
     64  1136							;/*
     65  1136							;    Character identifier decoder - Support
     66  1136							;    @ Author:   Justin Parker
     67  1136							;
     68  1136							;    ~ Usage:	  $fc | Character identifier byte
     69  1136							;
     70  1136							;    & Location specific:    No
     71  1136							;    % Alters:   $fc, $fd
     72  1136							;
     73  1136							;    # Notes: Returns low byte in $fd and high byte in $fc
     74  1136							;    19 Bytes
     75  1136							;*/
     76  1491					      org	$1491	; Memory location of new code region
     77  1491				   charMidbyte
     78  1491		       a2 03		      ldx	#$03	; Initialize counter while also setting up for ror, since high nibble = 0 is all that matters
     79  1493		       86 fd		      stx	$fd	; Store value in $fd for ror
     80  1495		       a5 fc		      lda	$fc	; Load identifier of first character to shift
     81  1497
     82  1497		       38		      sec		; Set carry flag to ensure high nibble is 1
     83  1498		       66 fc		      ror	$fc	; Shift high nibble of identifier
     84  149a				   cM_L 		; Perform shift 3 times
     85  149a		       66 fd		      ror	$fd	; --^
     86  149c		       46 fc		      lsr	$fc	; --^
     87  149e		       ca		      dex		; --^
     88  149f		       d0 f9		      bne	cM_L	; --*
     89  14a1		       66 fd		      ror	$fd	; Shift low nibble of identifier
     90  14a3		       60		      rts
     91  14a4
     92  14a4							;/*
     93  14a4							;    A.M.O.G.U.S. Character Horizontal Shift Routine (Advanced Movement Of Graphics Using Shift)
     94  14a4							;    @ Author:   Justin Parker
     95  14a4							;
     96  14a4							;    ~ Usage:	  $fb	  | Direction to shift character (3e = <-, 7e = ->)
     97  14a4							;		  $fc	  | Identifier of first linked character to shift ($1**0)
     98  14a4							;
     99  14a4							;    & Location specific:    Yes
    100  14a4							;    % Alters:   $fb, $fc, $fd
    101  14a4							;
    102  14a4							;    # Notes:	  Requires linked characters to be stored at $1**0 and $1**8 respectively
    103  14a4							;    33 Bytes
    104  14a4							;*/
    105  1501					      org	$1501	; Memory location of new code region
    106  1501				   charShift_H
    107  1501		       ad 1a 15 	      lda	$151a	; Get the high address byte
    108  1504		       8d 1d 15 	      sta	$151d	; Store in the second ROR address byte
    109  1507
    110  1507		       ad 19 15 	      lda	$1519	; Get the low address byte
    111  150a		       09 08		      ora	#$08	; Add 8 to the low address byte (Since the linked character is stored at $***0)
    112  150c		       8d 1c 15 	      sta	$151c	; Store in the first ROR address byte
    113  150f
    114  150f		       ad 18 15 	      lda	$1518	; Get the instruction byte
    115  1512		       8d 1b 15 	      sta	$151b	; Store in the instruction byte
    116  1515
    117  1515		       a2 07		      ldx	#$07	; Set x to 7 (The number of bytes needed to ROR)
    118  1517		       18		      clc		; Clear the carry flag
    119  1518				   cS_L
    120  1518		       7e 34 12 	      ror	$1234,x	; Rotate out of first character [SMC]
    121  151b		       3e 65 87 	      rol	$8765,x	; Rotate into second character [SMC]
    122  151e		       ca		      dex		; Decrement x
    123  151f		       d0 f7		      bne	cS_L	; Branch if x got underflowed
    124  1521		       60		      rts
    125  1522
    126  1522							;/*
    127  1522							;    The best goddamn timer that's ever existed on pure American hardware god damnit
    128  1522							;    @ Author:   Justin Parker
    129  1522							;
    130  1522							;    ~ Usage:	  $fc | Number of ~2ms intervals you want to wait for
    131  1522							;
    132  1522							;    & Location specific:    No
    133  1522							;    % Alters:   $fb, $fc
    134  1522							;
    135  1522							;    # Notes: This is a blocking timer. It will not return until the timer has expired.
    136  1522							;    9 Bytes
    137  1522							;*/
    138  1551					      org	$1551	; Memory location of new code region
    139  1551				   timer
    140  1551		       c6 fb		      dec	$fb	; Decrement the timer low-bit (is not initially set, so timing may vary by up to 1 cycle)
    141  1553		       d0 fc		      bne	timer	; If the low-bit isn't zero, keep decrementing the low-bit
    142  1555		       c6 fc		      dec	$fc	; If the low-bit is zero, decrement the timer high-bit
    143  1557		       d0 f8		      bne	timer	; If the high-bit isn't zero, keep decrementing the low-bit
    144  1559		       60		      rts		; If the high-bit is zero, return from subroutine
    145  155a
    146  155a							;/*
    147  155a							;    E.J.E.C.T Character Flip Routine (Efficient Juggling of Expelled Characters)
    148  155a							;    @ Author:   Justin Parker
    149  155a							;
    150  155a							;    ~ Usage:	  $fc | Character identifier byte
    151  155a							;
    152  155a							;    & Location specific:    Yes
    153  155a							;    % Alters:   $fc, $fd
    154  155a							;
    155  155a							;    # Notes:
    156  155a							;    41 bytes
    157  155a							;*/
    158  1561					      org	$1561	; Memory location of new code region
    159  1561				   characterFlip
    160  1561		       20 91 14 	      jsr	charMidbyte	; Format the identifier into low and high address bytes
    161  1564
    162  1564		       a2 07		      ldx	#$07	; Set x to 7 (The number of bytes we need to flip)
    163  1566		       a5 fd		      lda	$fd	; Load low byte of the address
    164  1568		       8d 77 15 	      sta	$1577	; Store value in $1561 + 16 [SMC]
    165  156b		       8d 84 15 	      sta	$1584	; Store value in $1561 + 23 [SMC]
    166  156e		       a5 fc		      lda	$fc	; Load high byte of the address
    167  1570		       8d 78 15 	      sta	$1578	; Store value in $1561 + 17 [SMC]
    168  1573		       8d 85 15 	      sta	$1585	; Store value in $1561 + 24 [SMC]
    169  1576				   rB_P
    170  1576		       bd 65 87 	      lda	$8765,x	; Load byte to be flipped [SMC]
    171  1579		       85 fc		      sta	$fc	; Store copy of byte to be flipped in $fc
    172  157b		       a0 08		      ldy	#$08	; Set y to 8 (The number of bits we need to flip)
    173  157d				   rB_L
    174  157d		       46 fc		      lsr	$fc	; Math stuff to get it to work
    175  157f		       2a		      rol		; --^
    176  1580		       88		      dey		; --^
    177  1581		       d0 fa		      bne	rB_L	; --*
    178  1583		       9d 65 87 	      sta	$8765,x	; Store flipped byte [SMC]
    179  1586		       ca		      dex		; Decrement x
    180  1587		       d0 ed		      bne	rB_P
    181  1589		       60		      rts
    182  158a
    183  158a
