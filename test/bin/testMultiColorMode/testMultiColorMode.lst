------- FILE testMultiColorMode.s LEVEL 1 PASS 2
      1  1178 ????						;/*
      2  1178 ????						;    Goal of this test is to properly implement multi-color mode.
      3  1178 ????						;*/
      4  1178 ????
      5  1178 ????						;/*
      6  1178 ????						;    Processor Information
      7  1178 ????						;*/
      8  1178 ????				      processor	6502	; This informs the assembler that we are using a 6502 processor.
      9  1178 ????
     10  1178 ????						;/*
     11  1178 ????						;    Memory Map
     12  1178 ????						;*/
     13  1001					      org	$1001	; mem location of user region
     14  1001		       0b 10		      dc.w	stubend
     15  1003		       01 00		      dc.w	1	; arbitrary line number for BASIC syntax
     16  1005		       9e 34 33 35*	      dc.b	$9e, "4353", 0	; allocate bytes. 4353 = 1101
     17  100b
     18  100b				   stubend
     19  100b		       00 00		      dc.w	0	; insert null byte
     20  100d
     21  100d							;/*
     22  100d							;    Global Definitions
     23  100d							;*/
     24  100d							; Routines
     25  100d		       ff d2	   CHROUT     =	$FFD2	; kernal character output routine
     26  100d		       e5 5f	   CLS	      =	$E55f	; kernal clear screen routine
     27  100d
     28  100d							; Memory Locations
     29  100d		       94 00	   COLMEM     =	$9400	; Color memory location
     30  100d		       1e 00	   SCRMEM     =	$1E00	; Screen memory location
     31  100d
     32  100d							; Custom Characters
     33  100d		       00 00 00    pad	      .byte.b	$00, $00, $00	; Padding so that next byte is on 8 byte boundary
     34  1010							; customA     .byte   $18, $24, $42, $7E, $42, $42, $42, $00 ; custom character A (has a mix of screen color, border color, character color, and aux color. honestly, this is the example A from the bible hehe)
     35  1010							; customChar	.byte	$7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E ; useless custom character, just for testing purposes
     36  1010		       00 3c 26 56*chr_1      .byte.b	$00, $3c, $26, $56, $56, $26, $3c, $24	; among us (sussy) [if this renders properly, then multi-color mode isn't working]
     37  1018
     38  1018							;/*
     39  1018							;    Main Program
     40  1018							;*/
     41  1101					      org	$1101	; mem location of code region
     42  1101				   start
     43  1101		       20 5f e5 	      jsr	CLS	; clear screen
     44  1104		       20 10 11 	      jsr	enableMultiColor
     45  1107		       20 11 11 	      jsr	prepareScreen
     46  110a							; jsr	   printCharacters
     47  110a
     48  110a		       a2 00		      ldx	#$00	; load x with 0
     49  110c		       20 44 11 	      jsr	printCharactersWithColors
     50  110f		       60		      rts		; return to caller
     51  1110
     52  1110				   enableMultiColor
     53  1110		       60		      rts
     54  1111
     55  1111				   prepareScreen
     56  1111							; remember: little endian, so its read right to left. (so the right most bit is bit 0, and the left most bit is bit 7)
     57  1111		       a9 00		      lda	#%00000000	; set screen color to black
     58  1113		       8d 0f 90 	      sta	$900f	; store screen color in memory
     59  1116							; bits 4-7 are the background color
     60  1116							; bits 0-2 are the border color
     61  1116							; bit 3 selects inverted or normal mode
     62  1116		       a9 00		      lda	#%00000000	; set border color to black
     63  1118		       8d 0e 90 	      sta	$900e
     64  111b							; bits 4-7 are the aux color
     65  111b							; bits 0-3 set the volume of all sound channels
     66  111b		       60		      rts		; Ultimately, this isn't needed, as we can just proceed to the next instruction. Just doing it for testing reasons.
     67  111c
     68  111c				   updateCurrentColor
     69  111c		       8e 86 02 	      stx	$0286
     70  111f		       e8		      inx
     71  1120		       60		      rts
     72  1121
     73  1121				   resetToDefaultColor
     74  1121		       a9 01		      lda	#$01
     75  1123		       8d 86 02 	      sta	$0286
     76  1126		       60		      rts
     77  1127
     78  1127				   printCharacters
     79  1127							; custom character A
     80  1127		       a9 fc		      lda	#$fc
     81  1129		       8d 05 90 	      sta	$9005	; load custom character set
     82  112c		       20 5f e5 	      jsr	$e55f	; clear screen
     83  112f		       a9 42		      lda	#$42	; set a to first character in new character set
     84  1131		       20 d2 ff 	      jsr	CHROUT
     85  1134		       60		      rts		; this is just for testing purposes, as the next routine is just for testing purposes
     86  1135
     87  1135				   printTestColorCharacter
     88  1135		       20 1c 11 	      jsr	updateCurrentColor
     89  1138		       a9 30		      lda	#$30
     90  113a		       20 d2 ff 	      jsr	CHROUT
     91  113d		       60		      rts
     92  113e
     93  113e				   printNewLine
     94  113e		       a9 11		      lda	#$11	; load new line character
     95  1140		       20 d2 ff 	      jsr	CHROUT	; print a newline
     96  1143		       60		      rts		; return to caller
     97  1144
     98  1144				   printCharactersWithColors
     99  1144							; ghetto method, sue me. i just like testing theories out quickly.
    100  1144		       20 35 11 	      jsr	printTestColorCharacter
    101  1147		       20 35 11 	      jsr	printTestColorCharacter
    102  114a		       20 35 11 	      jsr	printTestColorCharacter
    103  114d		       20 35 11 	      jsr	printTestColorCharacter
    104  1150		       20 35 11 	      jsr	printTestColorCharacter
    105  1153		       20 35 11 	      jsr	printTestColorCharacter
    106  1156		       20 35 11 	      jsr	printTestColorCharacter
    107  1159		       20 35 11 	      jsr	printTestColorCharacter
    108  115c		       20 35 11 	      jsr	printTestColorCharacter
    109  115f		       20 35 11 	      jsr	printTestColorCharacter
    110  1162		       20 35 11 	      jsr	printTestColorCharacter
    111  1165		       20 35 11 	      jsr	printTestColorCharacter
    112  1168		       20 35 11 	      jsr	printTestColorCharacter
    113  116b		       20 35 11 	      jsr	printTestColorCharacter
    114  116e		       20 35 11 	      jsr	printTestColorCharacter
    115  1171
    116  1171		       20 3e 11 	      jsr	printNewLine
    117  1174		       20 21 11 	      jsr	resetToDefaultColor
    118  1177
    119  1177		       60		      rts		; this is just for testing purposes, as the next routine is just for testing purposes
    120  1178
    121  1178
    122  1178
    123  1178
    124  1178							;/*
    125  1178							;    Notes
    126  1178							;
    127  1178							;    -> When we've enabled multicolor mode, characters are 4x8 pixels instead of 8x8 pixels. (Halved horizontally, so we can use the mutlicolor mode)
    128  1178							;
    129  1178							;    -> $0x286 is the address for the color that is currently being printed. (We can manipulate this to change the color of each character)
    130  1178							;	  -> From testing this register, with my very professional testing method of printing a bunch of characters, I've determined the following (plus the VIC manual):
    131  1178							;	      - 0-7 seems to be just the normal colors for the background
    132  1178							;		  - 0 = black, 1 = white, 2 = red, 3 = cyan, 4 = purple, 5 = green, 6 = blue, 7 = yellow
    133  1178							;	      - 8-15 seems to be colors for multi-color mode (makes sense)
    134  1178							;*/
