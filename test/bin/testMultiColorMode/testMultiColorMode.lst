------- FILE testMultiColorMode.s LEVEL 1 PASS 2
      1  112a ????						;/*
      2  112a ????						;    Goal of this test is to properly implement multi-color mode.
      3  112a ????						;*/
      4  112a ????
      5  112a ????						;/*
      6  112a ????						;    Processor Information
      7  112a ????						;*/
      8  112a ????				      processor	6502	; This informs the assembler that we are using a 6502 processor.
      9  112a ????
     10  112a ????						;/*
     11  112a ????						;    Memory Map
     12  112a ????						;*/
     13  1001					      org	$1001	; mem location of user region
     14  1001		       0b 10		      dc.w	stubend
     15  1003		       01 00		      dc.w	1	; arbitrary line number for BASIC syntax
     16  1005		       9e 34 33 35*	      dc.b	$9e, "4353", 0	; allocate bytes. 4353 = 1101
     17  100b
     18  100b				   stubend
     19  100b		       00 00		      dc.w	0	; insert null byte
     20  100d
     21  100d							;/*
     22  100d							;    Global Definitions
     23  100d							;*/
     24  100d							; Routines
     25  100d		       ff d2	   CHROUT     =	$FFD2	; kernal character output routine
     26  100d		       e5 5f	   CLS	      =	$E55f	; kernal clear screen routine
     27  100d
     28  100d							; Memory Locations
     29  100d		       94 00	   COLMEM     =	$9400	; Color memory location
     30  100d		       1e 00	   SCRMEM     =	$1E00	; Screen memory location
     31  100d
     32  100d							; Custom Characters
     33  100d		       00 00 00    pad	      .byte.b	$00, $00, $00	; Padding so that next byte is on 8 byte boundary
     34  1010							; customA     .byte   $18, $24, $42, $7E, $42, $42, $42, $00 ; custom character A (has a mix of screen color, border color, character color, and aux color. honestly, this is the example A from the bible hehe)
     35  1010							; customChar	.byte	$7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E ; useless custom character, just for testing purposes
     36  1010		       00 3c 26 56*chr_1      .byte.b	$00, $3c, $26, $56, $56, $26, $3c, $24	; among us (sussy)
     37  1018
     38  1018							;/*
     39  1018							;    Main Program
     40  1018							;*/
     41  1101					      org	$1101	; mem location of code region
     42  1101				   start
     43  1101		       20 5f e5 	      jsr	CLS	; clear screen
     44  1104		       20 0e 11 	      jsr	enableMultiColor
     45  1107		       20 0f 11 	      jsr	prepareScreen
     46  110a		       4c 1a 11 	      jmp	printCharacters
     47  110d		       60		      rts		; return to caller
     48  110e
     49  110e				   enableMultiColor
     50  110e		       60		      rts
     51  110f
     52  110f				   prepareScreen
     53  110f							; remember: little endian, so its read right to left. (so the right most bit is bit 0, and the left most bit is bit 7)
     54  110f		       a9 00		      lda	#%00000000	; set screen color to black
     55  1111		       8d 0f 90 	      sta	$900f	; store screen color in memory
     56  1114							; bits 4-7 are the background color
     57  1114							; bits 0-2 are the border color
     58  1114							; bit 3 selects inverted or normal mode
     59  1114		       a9 00		      lda	#%00000000	; set border color to black
     60  1116		       8d 0e 90 	      sta	$900e
     61  1119							; bits 4-7 are the aux color
     62  1119							; bits 0-3 set the volume of all sound channels
     63  1119		       60		      rts		; Ultimately, this isn't needed, as we can just proceed to the next instruction. Just doing it for testing reasons.
     64  111a
     65  111a				   printCharacters
     66  111a							; custom character A
     67  111a		       a9 fc		      lda	#$fc
     68  111c		       8d 05 90 	      sta	$9005	; load custom character set
     69  111f		       20 5f e5 	      jsr	$e55f	; clear screen
     70  1122		       a9 42		      lda	#$42	; set a to first character in new character set
     71  1124		       20 d2 ff 	      jsr	CHROUT
     72  1127		       4c 1a 11 	      jmp	printCharacters
     73  112a
     74  112a
     75  112a
     76  112a
     77  112a							;/*
     78  112a							;    Notes
     79  112a							;
     80  112a							;    -> When we've enabled multicolor mode, characters are 4x8 pixels instead of 8x8 pixels. (Halved horizontally, so we can use the mutlicolor mode)
     81  112a							;*/
