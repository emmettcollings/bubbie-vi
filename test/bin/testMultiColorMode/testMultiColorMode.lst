------- FILE testMultiColorMode.s LEVEL 1 PASS 2
      1  116b ????						;/*
      2  116b ????						;    Goal of this test is to properly implement multi-color mode.
      3  116b ????						;*/
      4  116b ????
      5  116b ????						;/*
      6  116b ????						;    Processor Information
      7  116b ????						;*/
      8  116b ????				      processor	6502	; This informs the assembler that we are using a 6502 processor.
      9  116b ????
     10  116b ????						;/*
     11  116b ????						;    Memory Map
     12  116b ????						;*/
     13  1001					      org	$1001	; mem location of user region
     14  1001		       0b 10		      dc.w	stubend
     15  1003		       01 00		      dc.w	1	; arbitrary line number for BASIC syntax
     16  1005		       9e 34 33 35*	      dc.b	$9e, "4353", 0	; allocate bytes. 4353 = 1101
     17  100b
     18  100b				   stubend
     19  100b		       00 00		      dc.w	0	; insert null byte
     20  100d
     21  100d							;/*
     22  100d							;    Global Definitions
     23  100d							;*/
     24  100d							; Routines
     25  100d		       ff d2	   CHROUT     =	$FFD2	; kernal character output routine
     26  100d		       e5 5f	   CLS	      =	$E55f	; kernal clear screen routine
     27  100d
     28  100d							; Memory Locations
     29  100d		       94 00	   COLMEM     =	$9400	; Color memory location
     30  100d		       1e 00	   SCRMEM     =	$1E00	; Screen memory location
     31  100d
     32  100d							; Custom Characters
     33  100d		       00 00 00    pad	      .byte.b	$00, $00, $00	; Padding so that next byte is on 8 byte boundary
     34  1010							; customA     .byte   $18, $24, $42, $7E, $42, $42, $42, $00 ; custom character A (has a mix of screen color, border color, character color, and aux color. honestly, this is the example A from the bible hehe)
     35  1010							; customChar	.byte	$7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E ; useless custom character, just for testing purposes
     36  1010		       00 3c 26 56*chr_1      .byte.b	$00, $3c, $26, $56, $56, $26, $3c, $24	; among us (sussy) [if this renders properly, then multi-color mode isn't working]
     37  1018
     38  1018							;/*
     39  1018							;    Main Program
     40  1018							;*/
     41  1101					      org	$1101	; mem location of code region
     42  1101				   start
     43  1101		       20 5f e5 	      jsr	CLS	; clear screen
     44  1104		       20 10 11 	      jsr	enableMultiColor
     45  1107		       20 11 11 	      jsr	prepareScreen
     46  110a							; jsr	   printCharacters
     47  110a
     48  110a		       a2 00		      ldx	#$00	; load x with 0
     49  110c		       20 38 11 	      jsr	printCharactersWithColors
     50  110f		       60		      rts		; return to caller
     51  1110
     52  1110				   enableMultiColor
     53  1110		       60		      rts
     54  1111
     55  1111				   prepareScreen
     56  1111							; remember: little endian, so its read right to left. (so the right most bit is bit 0, and the left most bit is bit 7)
     57  1111		       a9 00		      lda	#%00000000	; set screen color to black
     58  1113		       8d 0f 90 	      sta	$900f	; store screen color in memory
     59  1116							; bits 4-7 are the background color
     60  1116							; bits 0-2 are the border color
     61  1116							; bit 3 selects inverted or normal mode
     62  1116		       a9 00		      lda	#%00000000	; set border color to black
     63  1118		       8d 0e 90 	      sta	$900e
     64  111b							; bits 4-7 are the aux color
     65  111b							; bits 0-3 set the volume of all sound channels
     66  111b		       60		      rts		; Ultimately, this isn't needed, as we can just proceed to the next instruction. Just doing it for testing reasons.
     67  111c
     68  111c				   updateCurrentColor
     69  111c		       8e 86 02 	      stx	$0286
     70  111f		       e8		      inx
     71  1120		       60		      rts
     72  1121
     73  1121				   printCharacters
     74  1121							; custom character A
     75  1121		       a9 fc		      lda	#$fc
     76  1123		       8d 05 90 	      sta	$9005	; load custom character set
     77  1126		       20 5f e5 	      jsr	$e55f	; clear screen
     78  1129		       a9 42		      lda	#$42	; set a to first character in new character set
     79  112b		       20 d2 ff 	      jsr	CHROUT
     80  112e		       60		      rts		; this is just for testing purposes, as the next routine is just for testing purposes
     81  112f
     82  112f				   printTestColorCharacter
     83  112f		       20 1c 11 	      jsr	updateCurrentColor
     84  1132		       a9 30		      lda	#$30
     85  1134		       20 d2 ff 	      jsr	CHROUT
     86  1137		       60		      rts
     87  1138
     88  1138				   printCharactersWithColors
     89  1138							; ghetto method, sue me. i just like testing theories out quickly.
     90  1138		       20 2f 11 	      jsr	printTestColorCharacter
     91  113b		       20 2f 11 	      jsr	printTestColorCharacter
     92  113e		       20 2f 11 	      jsr	printTestColorCharacter
     93  1141		       20 2f 11 	      jsr	printTestColorCharacter
     94  1144		       20 2f 11 	      jsr	printTestColorCharacter
     95  1147		       20 2f 11 	      jsr	printTestColorCharacter
     96  114a		       20 2f 11 	      jsr	printTestColorCharacter
     97  114d		       20 2f 11 	      jsr	printTestColorCharacter
     98  1150		       20 2f 11 	      jsr	printTestColorCharacter
     99  1153		       20 2f 11 	      jsr	printTestColorCharacter
    100  1156		       20 2f 11 	      jsr	printTestColorCharacter
    101  1159		       20 2f 11 	      jsr	printTestColorCharacter
    102  115c		       20 2f 11 	      jsr	printTestColorCharacter
    103  115f		       20 2f 11 	      jsr	printTestColorCharacter
    104  1162		       20 2f 11 	      jsr	printTestColorCharacter
    105  1165
    106  1165		       a9 01		      lda	#$01
    107  1167		       8d 86 02 	      sta	$0286
    108  116a
    109  116a		       60		      rts		; this is just for testing purposes, as the next routine is just for testing purposes
    110  116b
    111  116b
    112  116b
    113  116b
    114  116b							;/*
    115  116b							;    Notes
    116  116b							;
    117  116b							;    -> When we've enabled multicolor mode, characters are 4x8 pixels instead of 8x8 pixels. (Halved horizontally, so we can use the mutlicolor mode)
    118  116b							;    -> $0x286 is the address for the color that is currently being printed. (We can manipulate this to change the color of each character)
    119  116b							;*/
