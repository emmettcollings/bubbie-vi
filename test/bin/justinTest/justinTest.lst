------- FILE justinTest.s LEVEL 1 PASS 2
      1  1647 ????						;/*
      2  1647 ????						;    Processor Information
      3  1647 ????						;*/
      4  1647 ????				      processor	6502	; This informs the assembler that we are using a 6502 processor.
      5  1647 ????
      6  1647 ????						;/*
      7  1647 ????						;    Memory Map
      8  1647 ????						;*/
      9  1001					      org	$1001	; mem location of user region
     10  1001		       0b 10		      dc.w	stubend
     11  1003		       01 00		      dc.w	1	; arbitrary line number for BASIC syntax
     12  1005		       9e 34 33 35*	      dc.b	$9e, "4353", 0	; allocate bytes. 4353 = 1101
     13  100b
     14  100b							;/*
     15  100b							;    Global Definitions
     16  100b							;*/
     17  100b		       ff d2	   CHROUT     =	$ffd2	; kernal character output routine
     18  100b
     19  100b							;/*
     20  100b							;    Utility Routines
     21  100b							;*/
     22  100b				   stubend
     23  100b		       00 00		      dc.w	0	; insert null byte
     24  100d
     25  100d							;/*
     26  100d							;    Data
     27  100d							;*/
     28  100d		       00 00 00    pad	      .byte.b	$00, $00, $00	; Padding so that next byte is on 8 byte boundary
     29  1020					      org	$1020
     30  1020		       ff 3c 26 56*chr_1      .byte.b	$ff, $3c, $26, $56, $56, $26, $3c, $24	; sus?
     31  1028		       00 00 00 00*chr_1_b    .byte.b	$00, $00, $00, $00, $00, $00, $00, $00	; sus_v2?
     32  1030
     33  1030							;/*
     34  1030							;    Main Routine
     35  1030							;*/
     36  1101					      org	$1101	; mem location of code region
     37  1101				   start
     38  1101		       a9 fc		      lda	#$fc
     39  1103		       8d 05 90 	      sta	$9005	; load custom character set
     40  1106		       20 5f e5 	      jsr	$e55f	; clear screen
     41  1109		       a9 44		      lda	#$42+2*(2-1)	; set a to first character in new character set
     42  110b		       20 d2 ff 	      jsr	CHROUT
     43  110e		       a9 45		      lda	#$43+2*(2-1)	; set a to second character in new character set
     44  1110		       20 d2 ff 	      jsr	CHROUT
     45  1113
     46  1113		       a9 02		      lda	#$02
     47  1115		       85 fd		      sta	$fd
     48  1117		       20 21 16 	      jsr	characterFlip
     49  111a
     50  111a				   loop
     51  111a
     52  111a		       a9 7f		      lda	#$7f
     53  111c		       85 fc		      sta	$fc
     54  111e		       20 01 16 	      jsr	timer
     55  1121
     56  1121		       a9 02		      lda	#$02
     57  1123		       85 fd		      sta	$fd
     58  1125		       a9 7e		      lda	#$7e
     59  1127		       85 fb		      sta	$fb
     60  1129
     61  1129		       20 01 15 	      jsr	charShift_H
     62  112c
     63  112c		       4c 1a 11 	      jmp	loop
     64  112f
     65  112f							;/*
     66  112f							;    E.J.E.CT. Character Identifier Decoder Routine (Efficient Juggling of Expelled CharacTers)
     67  112f							;    @ Author:   Justin Parker
     68  112f							;
     69  112f							;    ~ Usage:	  -> $fd | Character identifier byte
     70  112f							;		  <- $fc | Character low byte
     71  112f							;		  <- $fd | Character high byte
     72  112f							;
     73  112f							;    & Location specific:    No
     74  112f							;    % Alters:   $fc, $fd
     75  112f							;
     76  112f							;    # Notes: ---
     77  112f							;    19 Bytes
     78  112f							;*/
     79  1491					      org	$1491	; Memory location of new code region
     80  1491				   charMidbyte
     81  1491		       a2 03		      ldx	#$03	; Initialize counter while also setting up for ROR, since high nibble = 0 is all that matters
     82  1493		       86 fc		      stx	$fc	; Store value in $fd for ROR
     83  1495		       a5 fd		      lda	$fd	; Load identifier of character to shift
     84  1497
     85  1497		       38		      sec		; Set carry flag to ensure high nibble is 1 (Math reasons)
     86  1498		       66 fd		      ror	$fd	; Shift high nibble of identifier
     87  149a				   cM_L 		; Perform shift 3 times
     88  149a		       66 fc		      ror	$fc	; --^
     89  149c		       46 fd		      lsr	$fd	; --^
     90  149e		       ca		      dex		; --^
     91  149f		       d0 f9		      bne	cM_L	; --*
     92  14a1		       66 fc		      ror	$fc	; Shift low nibble of identifier
     93  14a3		       60		      rts
     94  14a4
     95  14a4							;/*
     96  14a4							;    A.M.O.G.U.S. Character Horizontal Shift Routine (Advanced Movement Of Graphics Using Shift)
     97  14a4							;    @ Author:   Justin Parker
     98  14a4							;
     99  14a4							;    ~ Usage:	  -> $fb | Direction to shift character (3e = <-, 7e = ->) (OP code for ROR/ROL Absolute,x)
    100  14a4							;		  -> $fc | Identifier of first linked character to shift ($1**0)
    101  14a4							;
    102  14a4							;    & Location specific:    Yes
    103  14a4							;    % Alters:   $fc, $fd
    104  14a4							;
    105  14a4							;    # Notes:	  Requires linked characters to be stored at $1**0 and $1**8 respectively
    106  14a4							;    49 Bytes
    107  14a4							;*/
    108  1501					      org	$1501	; Memory location of new code region
    109  1501				   charShift_H
    110  1501		       20 91 14 	      jsr	charMidbyte	; Format the identifier into low and high address bytes
    111  1504
    112  1504		       a2 07		      ldx	#$07	; Initialize counter for the loop to transfer the ROR/ROL instructions (3)
    113  1506				   cS_hA		; Here we prep the two ROR/ROL instructions
    114  1506		       b5 f6		      lda	$f6,x	; Get the op code and character address bytes from zero page
    115  1508		       9d 23 15 	      sta	$1501+$22,x	; Store first instruction set into first ROR/ROL [SMC]
    116  150b		       e0 06		      cpx	#$06	; Check if we're reading the low address byte
    117  150d		       d0 02		      bne	cS_hB	; If not, skip the next instruction
    118  150f		       09 08		      ora	#$08	; Add 8 to the low address byte, changing $1**0 into $1**8
    119  1511				   cS_hB
    120  1511		       9d 26 15 	      sta	$1501+$25,x	; Store second instruction set into second ROR/ROL [SMC]
    121  1514		       e0 05		      cpx	#$05
    122  1516		       d0 04		      bne	cS_hC
    123  1518		       a2 08		      ldx	#$08
    124  151a		       49 14		      eor	#$14	; Magic number that turns 7e -> 6a and 3e -> 2a
    125  151c				   cS_hC
    126  151c		       9d 1f 15 	      sta	$1501+$1e,x
    127  151f		       ca		      dex		; Decrement counter
    128  1520		       e0 07		      cpx	#$07
    129  1522		       d0 e2		      bne	cS_hA	; Loop until counter underflows, indicating that we've processed all 3 bytes
    130  1524				   cS_hD		; x is now 7, so we can use it as the counter for the main loop
    131  1524		       bd 99 99 	      lda	$9999,x	; Load the second linked character [SMC]
    132  1527		       6a		      ror		; Move bit 0/7 to carry depending on ROR/ROL [SMC]
    133  1528		       7e 99 99 	      ror	$9999,x	; Rotate out of first character, shifting in the carry [SMC]
    134  152b		       7e 99 99 	      ror	$9999,x	; Rotate into second character [SMC]
    135  152e		       ca		      dex		; Decrement counter
    136  152f		       10 f3		      bpl	cS_hD	; If counter hasn't underflowed, loop
    137  1531		       60		      rts
    138  1532
    139  1532							;/*
    140  1532							;    V.E.N.T.E.D. Character Vertical Shift Routine (Vertical Ejection of Narrowly-Tiled Entity Data)
    141  1532							;    @ Author:   Justin Parker
    142  1532							;
    143  1532							;    ~ Usage:	  -> $fb | Direction to shift character (07 = ^, else = v)
    144  1532							;		  -> $fc | Identifier of first linked character to shift ($1**0)
    145  1532							;
    146  1532							;    & Location specific:    Yes
    147  1532							;    % Alters:   $fb, $fc, $fd
    148  1532							;
    149  1532							;    # Notes:	  Requires linked characters to be stored at $1**0 and $1**8 respectively
    150  1532							;    75 Bytes
    151  1532							;*/
    152  1551					      org	$1551	; Memory location of new code region
    153  1551				   charShift_V
    154  1551		       20 91 14 	      jsr	charMidbyte	; Format the identifier into low and high address bytes
    155  1554
    156  1554		       a2 01		      ldx	#$01
    157  1556
    158  1556		       ad 20 10 	      lda	$1020
    159  1559		       85 fb		      sta	$fb
    160  155b
    161  155b		       a9 10		      lda	#$10
    162  155d		       85 fd		      sta	$fd
    163  155f				   LLL
    164  155f		       bd 20 10 	      lda	$1020,x
    165  1562		       ca		      dex
    166  1563
    167  1563		       8a		      txa
    168  1564		       29 0f		      and	#$0f
    169  1566		       aa		      tax
    170  1567
    171  1567		       9d 20 10 	      sta	$1020,x
    172  156a		       e8		      inx
    173  156b		       e8		      inx
    174  156c
    175  156c		       8a		      txa
    176  156d		       29 0f		      and	#$0f
    177  156f		       aa		      tax
    178  1570
    179  1570		       c6 fd		      dec	$fd
    180  1572		       d0 eb		      bne	LLL
    181  1574
    182  1574		       a5 fb		      lda	$fb
    183  1576		       8d 2f 10 	      sta	$102f
    184  1579
    185  1579							; lda	   $1029
    186  1579							; sta	   $1028
    187  1579
    188  1579							; lda	   $102a
    189  1579							; sta	   $1029
    190  1579
    191  1579							; lda	   $102b
    192  1579							; sta	   $102a
    193  1579
    194  1579							; lda	   $102c
    195  1579							; sta	   $102b
    196  1579
    197  1579							; lda	   $102d
    198  1579							; sta	   $102c
    199  1579
    200  1579							; lda	   $102e
    201  1579							; sta	   $102d
    202  1579
    203  1579							; lda	   $102f
    204  1579							; sta	   $102e
    205  1579
    206  1579							; lda	   $1020
    207  1579							; sta	   $102f
    208  1579
    209  1579							; lda	   $1021
    210  1579							; sta	   $1020
    211  1579
    212  1579							; lda	   $1022
    213  1579							; sta	   $1021
    214  1579
    215  1579							; lda	   $1023
    216  1579							; sta	   $1022
    217  1579
    218  1579							; lda	   $1024
    219  1579							; sta	   $1023
    220  1579
    221  1579							; lda	   $1025
    222  1579							; sta	   $1024
    223  1579
    224  1579							; lda	   $1026
    225  1579							; sta	   $1025
    226  1579
    227  1579							; lda	   $1027
    228  1579							; sta	   $1026
    229  1579
    230  1579							; lda	   #$00
    231  1579							; sta	   $1027
    232  1579
    233  1579		       60		      rts
    234  157a
    235  157a							;/*
    236  157a							;    The best goddamn timer that's ever existed on pure American hardware god damnit
    237  157a							;    @ Author:   Justin Parker
    238  157a							;
    239  157a							;    ~ Usage:	  -> $fc | Number of ~2ms intervals you want to wait for
    240  157a							;
    241  157a							;    & Location specific:    No
    242  157a							;    % Alters:   $fb, $fc
    243  157a							;
    244  157a							;    # Notes: This is a blocking timer. It will not return until the timer has expired.
    245  157a							;    9 Bytes
    246  157a							;*/
    247  1601					      org	$1601	; Memory location of new code region
    248  1601				   timer
    249  1601		       c6 fb		      dec	$fb	; Decrement the timer low-bit (is not initially set, so timing may vary by up to 1 cycle)
    250  1603		       d0 fc		      bne	timer	; If the low-bit isn't zero, keep decrementing the low-bit
    251  1605		       c6 fc		      dec	$fc	; If the low-bit is zero, decrement the timer high-bit
    252  1607		       d0 f8		      bne	timer	; If the high-bit isn't zero, keep decrementing the low-bit
    253  1609		       60		      rts		; If the high-bit is zero, return from subroutine
    254  160a
    255  160a							;/*
    256  160a							;    I.M.P.O.S.T.O.R. Character Flip Routine (Invertion Movement of Pre-Ordered, Shifted Tables Of Rasters)
    257  160a							;    @ Author:   Justin Parker
    258  160a							;
    259  160a							;    ~ Usage:	  -> $fc | Character identifier byte
    260  160a							;
    261  160a							;    & Location specific:    Yes
    262  160a							;    % Alters:   $fc, $fd
    263  160a							;
    264  160a							;    # Notes:	  Requires linked characters to be stored at $1**0 and $1**8 respectively
    265  160a							;    38 bytes
    266  160a							;*/
    267  1621					      org	$1621	; Memory location of new code region [TODO: Better comments]
    268  1621				   characterFlip
    269  1621		       20 91 14 	      jsr	charMidbyte	; Format the identifier into low and high address bytes
    270  1624
    271  1624		       a2 01		      ldx	#$01	; Initialize counter for the loop to transfer LDA and STA instructions
    272  1626				   cF_N
    273  1626		       b5 fc		      lda	$fc,x	; Load address bytes of character to flip
    274  1628		       9d 34 16 	      sta	$1621+$13,x	; Store value in org + $13 [SMC]
    275  162b		       9d 41 16 	      sta	$1621+$20,x	; Store value in org + $20 [SMC]
    276  162e		       ca		      dex		; Decrement counter
    277  162f		       10 f5		      bpl	cF_N	; If counter did not underflow yet, loop
    278  1631
    279  1631		       a2 07		      ldx	#$07	; Set x to 7 (The number of bytes we need to flip)
    280  1633				   cF_M
    281  1633		       bd 99 99 	      lda	$9999,x	; Load byte to be flipped [SMC]
    282  1636		       85 fc		      sta	$fc	; Store copy of byte to be flipped in $fc
    283  1638		       a0 07		      ldy	#$07	; Set y to 8 (The number of bits we need to flip)
    284  163a				   cF_L
    285  163a		       46 fc		      lsr	$fc	; Math stuff to get it to work
    286  163c		       2a		      rol		; --^
    287  163d		       88		      dey		; --^
    288  163e		       10 fa		      bpl	cF_L	; --*
    289  1640		       9d 99 99 	      sta	$9999,x	; Store flipped byte [SMC]
    290  1643		       ca		      dex		; Decrement x
    291  1644		       d0 ed		      bne	cF_M	; If x is not zero, loop
    292  1646		       60		      rts
    293  1647
    294  1647
